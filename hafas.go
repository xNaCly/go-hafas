// gohafas wraps the autogenerated openapi client provided by vbbraw which was
// generated from https://vbb-demo.demo2.hafas.cloud/api/fahrinfo/latest/api-doc via the flake.nix file at the root of this project
package gohafas

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"

	"github.com/xNaCly/go-hafas/vbbraw"
)

func debugStruct[S any](s S) {
	out, err := json.MarshalIndent(s, "", "\t")
	if err != nil {
		panic(err)
	}
	fmt.Println(string(out))
}

type Location struct {
	// Inner is the original Location result before processing resulted in the outer structure - this is an escape hatch
	Inner vbbraw.LocationList_StopLocationOrCoordLocation_Item
}

func (c *Client) LocationsByName(name string, opt *vbbraw.Verb8Params) ([]Location, error) {
	if opt == nil {
		opt = &vbbraw.Verb8Params{}
	}
	opt.Input = name
	resp, err := c.ClientWithResponses.Verb8WithResponse(context.Background(), opt)
	if err != nil {
		return nil, errors.Join(errors.New("Failed to request LocationsByName"), err)
	}

	if resp.StatusCode() != http.StatusOK {
		e := errorFromBytes(resp.Body)
		return nil, errors.Join(errors.New("Non 200 status code while requesting LocationsByName"), e)
	}

	source := resp.JSON200.StopLocationOrCoordLocation
	locations := make([]Location, len(*source))
	for i, raw := range *source {
		locations[i] = Location{Inner: raw}
	}

	return locations, nil
}
